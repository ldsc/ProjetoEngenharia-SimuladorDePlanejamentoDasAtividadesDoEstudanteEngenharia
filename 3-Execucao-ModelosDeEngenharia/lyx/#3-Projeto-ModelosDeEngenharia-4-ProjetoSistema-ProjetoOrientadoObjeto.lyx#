#LyX 2.4 created this file. For more info see https://www.lyx.org/
\lyxformat 620
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass extbook
\begin_preamble
\usepackage {graphicx}
\usepackage {longtable}
\usepackage {indentfirst}
\renewenvironment{center}{\par\centering}{\par}

% Comentar linhas abaixo se não estiver usando pacote abntex
% ou se o pacote ainda não foi instalado.
% neste caso sugere-se usar citações no padrão apalike (lembra o da anbt).
%\usepackage[alf ,abnt-etal-cite=2 , abnt-year-extra-label=yes , abnt-etal-list=0]{abntcite}
%\usepackage {helvet}
%\renewcommand {\familydefault}{\sfdefault}

% Para uso de listagens de código
\usepackage{color}
\definecolor{azulclaro}{rgb}{0.6,1,1}%   rgb color model
% Informa que vai usar o pacote listings, 
% disponibilizado em /usr/share/texmf/doc/latex/styles/listings.dvi
\usepackage{listings}
\end_preamble
\use_default_options false
\master DocumentoMestre-Trabalho-ProgramacaoPratica.lyx
\maintain_unincluded_children no
\language brazilian
\language_package auto
\inputencoding auto-legacy
\fontencoding auto
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_roman_osf false
\font_sans_osf false
\font_typewriter_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement p
\paperfontsize 12
\spacing onehalf
\use_hyperref false
\papersize a4
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_formatted_ref 0
\use_minted 0
\use_lineno 0
\index Índice
\shortcut idx
\color #008000
\end_index
\paperwidth 210mm
\paperheight 297mm
\leftmargin 30mm
\topmargin 25mm
\rightmargin 20mm
\bottommargin 20mm
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle fancy
\tablestyle default
\tracking_changes false
\output_changes false
\change_bars false
\postpone_fragile_content false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\docbook_table_output 0
\docbook_mathml_prefix 1
\end_header

\begin_body

\begin_layout Chapter
Projeto 
\begin_inset CommandInset label
LatexCommand label
name "chap:Projeto-do-Sistema"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lhead{
\backslash
thechapter - Projeto} 
\end_layout

\end_inset


\end_layout

\begin_layout Section
Projeto do Sistema
\begin_inset Index idx
range none
pageformat default
status open

\begin_layout Plain Layout
Projeto do sistema
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sec:Projeto-do-sistema"

\end_inset


\end_layout

\begin_layout Standard
O projeto do sistema PetroPlanner foi estruturado com base na análise orientada a objeto e nas necessidades práticas dos estudantes de Engenharia de Petróleo.
 O sistema foi concebido como uma aplicação desktop autônoma,
 utilizando C++ com o framework Qt para a interface gráfica e manipulação de dados.
\end_layout

\begin_layout Enumerate
Protocolos
\begin_inset Index idx
range none
pageformat default
status open

\begin_layout Plain Layout
Protocolos
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Entre elementos externos:
 A aplicação não depende de comunicação com dispositivos externos ou APIs.
 O foco está na interação direta com o usuário por meio da interface gráfica.
\end_layout

\begin_layout Itemize
Entre elementos internos:
 Os módulos se comunicam por meio de chamadas de métodos diretas,
 utilizando objetos e ponteiros.
 O sistema de sinais e slots do Qt também é amplamente utilizado para eventos da interface.
\end_layout

\begin_layout Itemize
Interface das classes:
 As APIs internas são definidas pelos arquivos de cabeçalho C++ (.h),
 que especificam os métodos públicos de cada classe.
\end_layout

\begin_layout Itemize
Formato de arquivos:
 As informações do aluno são salvas em arquivos .txt,
 com estrutura delimitada por ponto e vírgula (;),
 facilitando leitura e edição.
\end_layout

\end_deeper
\begin_layout Enumerate
Recursos
\begin_inset Index idx
range none
pageformat default
status open

\begin_layout Plain Layout
Recursos
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Uso de memória:
 O gerenciamento é feito pelo Qt,
 que possui hierarquia de objetos parent-child,
 e pelo uso consciente de new/delete e containers da STL.
\end_layout

\begin_layout Itemize
Banco de dados:
 Não foi usado um banco de dados tradicional.
 Os dados são persistidos em arquivos de texto,
 mas a estrutura pode ser adaptada futuramente para uso de SQLite.
\end_layout

\begin_layout Itemize
Armazenamento:
 Todo o conteúdo é armazenado localmente no computador do usuário.
 A portabilidade é garantida pelos arquivos simples e leves.
\end_layout

\end_deeper
\begin_layout Enumerate
Controle
\begin_inset Index idx
range none
pageformat default
status open

\begin_layout Plain Layout
Controle
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Baseado em eventos:
 O sistema responde a eventos do usuário (cliques,
 seleções),
 utilizando o sistema de event loop do Qt.
\end_layout

\begin_layout Itemize
Condições extremas:
 São tratadas por meio de verificações de entrada (como número de faltas,
 notas fora do padrão) e mensagens de alerta.
\end_layout

\begin_layout Itemize
Concorrência:
 Como o sistema é leve e voltado para tarefas rápidas,
 a concorrência ainda não foi necessária,
 mas o Qt oferece suporte a QThread para futuras otimizações.
\end_layout

\begin_layout Itemize
Escalas de tempo:
 As interações são imediatas.
 Alterações em dados são salvas logo após ações do usuário (ex:
 clicar em “Salvar”).
\end_layout

\end_deeper
\begin_layout Enumerate
Plataformas
\begin_inset Index idx
range none
pageformat default
status open

\begin_layout Plain Layout
Plataformas
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Arquitetura:
 O projeto adota uma estrutura próxima ao padrão MVC:
 dados (modelos),
 telas (views) e funções de controle (slots e métodos).
\end_layout

\begin_layout Itemize
Plataformas suportadas:
 Qt permite compatibilidade com Windows,
 Linux e macOS.
\end_layout

\begin_layout Itemize
Bibliotecas utilizadas:
\end_layout

\begin_layout Itemize
Qt:
 Interface gráfica,
 gerenciamento de eventos,
 arquivos.
\end_layout

\begin_layout Itemize
STL:
 Containers (vector,
 map,
 etc.).
\end_layout

\begin_layout Itemize
IDE:
 Qt Creator,
 voltado para projetos em C++/Qt.
\end_layout

\end_deeper
\begin_layout Enumerate
Padrões de projeto
\end_layout

\begin_layout Standard
Foram seguidos princípios básicos de projeto orientado a objeto:
\end_layout

\begin_layout Itemize
Modularidade:
 cada classe tem uma responsabilidade bem definida.
\end_layout

\begin_layout Itemize
Baixo acoplamento e alta coesão:
 a comunicação entre os módulos se dá por meio de interfaces diretas ou sinais.
\end_layout

\begin_layout Itemize
Padrões usados:
\end_layout

\begin_deeper
\begin_layout Itemize
MVC:
 organização entre interface,
 lógica e dados.
\end_layout

\begin_layout Itemize
Observer (via sinais e slots):
 resposta a eventos na interface.
\end_layout

\begin_layout Itemize
Singleton (implícito para classes que representam o aluno ativo).
\end_layout

\end_deeper
\begin_layout Section
Projeto Orientado a Objeto – POO
\begin_inset Index idx
range none
pageformat default
status open

\begin_layout Plain Layout
POO
\end_layout

\end_inset


\begin_inset Index idx
range none
pageformat default
status open

\begin_layout Plain Layout
Projeto orientado a objeto
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sec:Projeto-orientado-a-objeto"

\end_inset


\end_layout

\begin_layout Standard
O projeto orientado a objeto é a etapa posterior ao projeto do sistema.
 Baseia-se na análise,
 mas considera as decisões do projeto do sistema.
 Acrescenta a análise desenvolvida e as características da plataforma escolhida (hardware,
 sistema operacional e linguagem de softwareção).
 Passa pelo maior detalhamento do funcionamento do software,
 acrescentando atributos e métodos que envolvem a solução de problemas específicos não identificados durante a análise.
\end_layout

\begin_layout Standard
Envolve a otimização da estrutura de dados e dos algoritmos,
 a minimização do tempo de execução,
 de memória e de custos.
 Existe um desvio de ênfase para os conceitos da plataforma selecionada.
 
\end_layout

\begin_layout Standard
Exemplo:
 na análise você define que existe um método para salvar um arquivo em disco,
 define um atributo nomeDoArquivo,
 mas não se preocupa com detalhes específicos da linguagem.
 Já no projeto,
 você inclui as bibliotecas necessárias para acesso ao disco,
 cria um objeto específico para acessar o disco,
 podendo,
 portanto,
 acrescentar novas classes àquelas desenvolvidas na análise.
 
\end_layout

\begin_layout Subsubsection
Efeitos do projeto no modelo
\begin_inset Index idx
range none
pageformat default
status open

\begin_layout Plain Layout
modelo
\end_layout

\end_inset

 estrutural
\begin_inset CommandInset label
LatexCommand label
name "subsec:Efeito-do-projeto-no-modelo-estrutural"

\end_inset


\end_layout

\begin_layout Itemize
Nos diagramas de pacotes,
 serão adicionados pacotes representando as bibliotecas externas (como Qt,
 STL,
 SQLite) e os subsistemas internos identificados (e.g.,
 PetroPlanner.GUI,
 PetroPlanner.BusinessLogic,
 PetroPlanner.DataPersistence,
 PetroPlanner.Calculations).
 As dependências entre esses pacotes serão claramente indicadas.
\end_layout

\begin_layout Itemize
O modelo de classes será expandido para incluir classes específicas da implementação que não estavam presentes na fase de análise puramente conceitual.
 Por exemplo:
\end_layout

\begin_layout Itemize
Classes do Qt como QMainWindow,
 QPushButton,
 QTableView,
 QSqlDatabase,
 QSqlQuery (ou similares,
 se usar outro ORM/biblioteca de acesso a dados).
\end_layout

\begin_layout Itemize
Classes wrapper para acesso ao banco de dados ou arquivos.
\end_layout

\begin_layout Itemize
Classes auxiliares para manipulação de dados ou cálculos,
 como StudentProfileManager,
 CourseCatalogManager,
 GradeSimulator.
 As associações entre essas novas classes e as classes do domínio (Aluno,
 Disciplina,
 Nota) serão definidas,
 detalhando como elas interagem.
\end_layout

\begin_layout Itemize
As dependências e restrições estarão ligadas principalmente ao uso do Qt Framework e do C++.
 Isso significa que o código deve aderir aos padrões de codificação do Qt (ex:
 sistema de objetos QObject,
 moc para sinais/slots) e às características da linguagem C++ (gerenciamento de memória,
 templates,
 etc.).
 A portabilidade entre os sistemas operacionais (Windows,
 macOS,
 Linux) impõe restrições de não usar APIs específicas de cada SO diretamente,
 mas sim as abstrações fornecidas pelo Qt.
\end_layout

\begin_layout Subsubsection
Efeitos do projeto no modelo
\begin_inset Index idx
range none
pageformat default
status open

\begin_layout Plain Layout
modelo
\end_layout

\end_inset

 dinâmico
\begin_inset CommandInset label
LatexCommand label
name "subsec:Efeito-do-projeto-no-modelo-dinamico"

\end_inset


\end_layout

\begin_layout Itemize
Os diagramas de sequência e de comunicação serão revisados para incorporar os detalhes de implementação.
 Por exemplo,
 em vez de apenas "salvar dados",
 o diagrama mostrará chamadas a métodos específicos de classes de persistência de dados (e.g.,
 dataManager.saveStudentData(student)),
 ou a interação entre um botão na GUI (QPushButton) e um método de slot em um controlador para processar um evento.
 A interação com o banco de dados (abertura de conexão,
 execução de queries) também será detalhada.
\end_layout

\begin_layout Itemize
Diagramas de Atividade:
 Serão revisados e ampliados para incluir as etapas de validação de entrada de dados,
 tratamento de erros,
 persistência de dados e as diferentes ramificações nas simulações (e.g.,
 cálculo de CR baseado em notas parciais ou finais).
\end_layout

\begin_layout Itemize
Diagramas de Máquina de Estado:
 Podem ser adicionados para modelar estados mais complexos da interface do usuário (ex:
 modo de edição de disciplina,
 modo de simulação,
 modo de visualização),
 ou o ciclo de vida de objetos importantes como o perfil do aluno (e.g.,
 carregado,
 modificado,
 salvo).
\end_layout

\begin_layout Subsubsection
Efeitos do projeto nos atributos
\begin_inset Index idx
range none
pageformat default
status open

\begin_layout Plain Layout
atributos
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "subsec:Efeito-do-projeto-nos-atributos"

\end_inset


\end_layout

\begin_layout Itemize
Durante o projeto,
 atributos adicionais que são específicos da implementação serão incorporados.
 Por exemplo:
\end_layout

\begin_layout Itemize
Em classes de GUI:
 ponteiros para widgets filhos (QLabel*,
 QLineEdit*,
 QPushButton*).
\end_layout

\begin_layout Itemize
Em classes de persistência:
 um objeto QSqlDatabase para gerenciar a conexão com o banco de dados,
 ou um path para o arquivo de dados.
\end_layout

\begin_layout Itemize
Atributos para flags de estado interno (bool isModified,
 bool isValidated).
\end_layout

\begin_layout Itemize
Constantes para caminhos de arquivo,
 nomes de tabelas de banco de dados,
 ou valores padrão.
\end_layout

\begin_layout Subsubsection
Efeitos do projeto nos métodos
\begin_inset Index idx
range none
pageformat default
status open

\begin_layout Plain Layout
métodos
\end_layout

\end_inset


\begin_inset Index idx
range none
pageformat default
status open

\begin_layout Plain Layout
Efeitos do projeto nos métodos
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Os métodos serão refinados para utilizar as APIs específicas do Qt e C++.
 Métodos de acesso a dados (leitura/escrita de arquivos ou banco de dados) serão implementados usando as classes do Qt (QFile,
 QTextStream,
 QSqlDatabase,
 QSqlQuery) ou a API do SQLite.
 Métodos da interface do usuário serão conectados a slots do Qt para responder a eventos.
 Por exemplo,
 um método salvarDados() da fase de análise se transformará em DataManager::saveStudentProfile(Student&) que internamente usa QSqlQuery para inserir/atualizar dados no banco.
\end_layout

\begin_layout Itemize
Métodos de Decisão/Controle:
 Serão,
 por exemplo,
 os métodos de controladores que orquestram a lógica da aplicação,
 como GradeSimulator::simulate(Student&,
 CoursePlan&) ou AbsenceTracker::checkAbsenceStatus(Discipline&) que podem decidir sobre a aprovação ou sugerir ações.
 Eles serão projetados para serem claros,
 flexíveis e podem usar polimorfismo (ex:
 diferentes estratégias de simulação).
\end_layout

\begin_layout Itemize
Métodos de Processamento:
 Incluirão algoritmos de cálculo (ex:
 calculateCR(),
 predictFinalGrade()) ou de manipulação de dados (ex:
 parseCourseDataFromFile()).
 Estes serão o foco de otimização de desempenho,
 e o polimorfismo pode ser usado se houver necessidade de diferentes implementações para o mesmo processamento.
\end_layout

\begin_layout Itemize
Algoritmos complexos como a simulação de múltiplos cenários de grade curricular ou a busca por combinações ideais de optativas serão subdivididos em funções menores e mais gerenciáveis.
 A STL (Standard Template Library) será amplamente utilizada para coleções de dados (std::vector,
 std::map,
 std::list) e algoritmos (std::sort,
 std::find) para garantir eficiência e robustez.
\end_layout

\begin_layout Itemize
Durante a fase de projeto,
 será realizada uma revisão rigorosa para assegurar que cada método de uma classe está alinhado com as responsabilidades e o escopo daquela classe,
 seguindo o Princípio da Responsabilidade Única (SRP).
 Isso evita que classes se tornem "Deus-objeto" (God Object) e garante um design mais limpo e modular.
\end_layout

\begin_layout Itemize
Após a definição detalhada dos métodos e atributos,
 os diagramas de classes,
 de sequência e de máquina de estado serão atualizados para refletir todas as decisões de projeto e os detalhes de implementação.
\end_layout

\begin_layout Subsubsection
Efeitos do projeto nas heranças
\begin_inset Index idx
range none
pageformat default
status open

\begin_layout Plain Layout
heranças
\end_layout

\end_inset


\begin_inset Index idx
range none
pageformat default
status open

\begin_layout Plain Layout
Efeitos do projeto nas heranças
\end_layout

\end_inset


\begin_inset Index idx
range none
pageformat default
status open

\begin_layout Plain Layout
Heranças
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
A herança será utilizada com parcimônia e apenas quando houver uma clara relação "É-UM".
 Se houver uma necessidade de funcionalidade comum entre classes sem uma relação de herança forte,
 será preferível a composição ou o uso de interfaces/classes abstratas.
 O polimorfismo será empregado para métodos que precisam de implementações diferentes em classes derivadas.
\end_layout

\begin_layout Itemize
Será buscada a abstração de comportamentos comuns.
 Por exemplo,
 se houver diferentes tipos de "avaliações" (prova,
 trabalho,
 lista),
 uma superclasse Avaliacao pode ser criada,
 com subclasses que implementam comportamentos específicos.
\end_layout

\begin_layout Itemize
A delegação será preferida em vez de herança quando a relação entre as classes for de "TEM-UM" em vez de "É-UM".
 Isso é crucial para evitar heranças problemáticas que levam a hierarquias de classes rígidas e difíceis de manter.
 Por exemplo,
 uma classe Aluno "tem" um HistoricoAcademico,
 em vez de "ser" um HistoricoAcademico.
\end_layout

\begin_layout Itemize
As hierarquias de herança no diagrama de classes serão revisadas para garantir que reflitam o design apropriado e que sigam os princípios de herança.
\end_layout

\begin_layout Subsubsection
Efeitos do projeto nas associações
\begin_inset Index idx
range none
pageformat default
status open

\begin_layout Plain Layout
Efeitos do projeto nas associações
\end_layout

\end_inset


\begin_inset Index idx
range none
pageformat default
status open

\begin_layout Plain Layout
Associações
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
As associações serão implementadas usando ponteiros (std::shared_ptr,
 std::weak_ptr para evitar ciclos de referência e gerenciamento de memória),
 referências ou coleções da STL (e.g.,
 std::vector<Disciplina*>,
 std::map<QString,
 Student*> para acesso rápido).
 O uso de QList,
 QVector,
 QMap do Qt também será considerado,
 conforme a necessidade de integração com o framework.
\end_layout

\begin_layout Itemize
Para relações de "muitos",
 especialmente quando o acesso a objetos específicos é frequente por uma chave (como código de disciplina ou matrícula de aluno),
 será utilizado std::map ou QMap (no caso do Qt) para implementar eficientemente essas associações.
 Por exemplo,
 um CourseCatalogManager pode ter um QMap<QString,
 Discipline*> para mapear códigos de disciplina a objetos Disciplina.
\end_layout

\begin_layout Itemize
Será aplicado o "Princípio do Mínimo Conhecimento" (Lei de Demeter) para evitar o acoplamento excessivo.
 Se o acesso a dados de classes distantes se tornar um problema de performance ou complexidade,
 associações diretas ou métodos de conveniência serão considerados para encapsular o acesso.
\end_layout

\begin_layout Subsubsection
Efeitos do projeto nas otimizações
\begin_inset Index idx
range none
pageformat default
status open

\begin_layout Plain Layout
otimizações
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Uma análise inicial de otimização será realizada,
 identificando as áreas mais críticas para o desempenho (ex:
 cálculos de simulação,
 carregamento de dados).
 Embora seja um projeto acadêmico,
 o foco será em boas práticas que naturalmente levam a um código mais eficiente,
 como o uso de algoritmos da STL e estruturas de dados apropriadas.
 A otimização prematura será evitada.
\end_layout

\begin_layout Itemize
Conforme mencionado na seção de "Controle",
 a simulação de múltiplos cenários de grade,
 cálculos complexos e operações de I/O intensivas serão os principais candidatos para otimização com processos concorrentes (threads),
 utilizando as funcionalidades do Qt para threading.
\end_layout

\begin_layout Itemize
As bibliotecas já selecionadas (Qt,
 STL) são otimizadas.
 Se surgir a necessidade de cálculos numéricos mais intensos ou manipulação de dados específicos,
 bibliotecas C++ de alto desempenho para esses domínios serão consideradas.
\end_layout

\begin_layout Itemize
Serão avaliados os caminhos de acesso aos dados.
 Se um caminho longo (student->history->courseEnrollment->grades.getFinalGrade()) for comum e impactar a legibilidade ou performance,
 associações diretas (student->getFinalGradeForCourse(courseCode)) ou métodos helper serão adicionados para simplificar o acesso.
\end_layout

\begin_layout Itemize
Atributos auxiliares (e.g.,
 cache de resultados de cálculos,
 flags de estado para otimização de renderização da GUI) serão introduzidos se a análise de desempenho indicar um gargalo significativo.
\end_layout

\begin_layout Itemize
A ordem de execução de operações que não dependem umas das outras será revisada para permitir paralelismo ou otimização,
 especialmente em carregamento e salvamento de dados,
 e em cálculos complexos.
\end_layout

\begin_layout Itemize
As associações nos diagramas de classes serão continuamente revisadas para refletir as decisões de otimização e a forma como os objetos se relacionam para um desempenho eficiente.
\end_layout

\begin_layout Section
Diagrama de Componentes
\begin_inset Index idx
range none
pageformat default
status open

\begin_layout Plain Layout
Diagrama de componentes
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sec:Diagrama-de-componentes"

\end_inset


\end_layout

\begin_layout Standard
Este diagrama representa os módulos físicos do sistema e suas dependências.
 Cada componente encapsula uma parte funcional,
 como o módulo de leitura de arquivos,
 o módulo de simulação ou o acompanhamento de disciplinas.
 Ele é importante para entender como o sistema é dividido em unidades reutilizáveis e independentes.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
alignment document
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename C:/Users/abiga/Downloads/8. Diagrama de Componentes – Arquitetura geral.png
	lyxscale 40
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Diagrama de componentes
\begin_inset CommandInset label
LatexCommand label
name "cap:Diagrama-de-componentes"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Diagrama de Implantação
\begin_inset Index idx
range none
pageformat default
status open

\begin_layout Plain Layout
Diagrama de implantação
\end_layout

\end_inset


\begin_inset Index idx
range none
pageformat default
status open

\begin_layout Plain Layout
Diagrama de execução
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sec:Diagrama-de-execução"

\end_inset


\end_layout

\begin_layout Standard
Este diagrama representa a arquitetura física de execução do sistema.
 Mostra onde os componentes do sistema estão implantados,
 como no ambiente local (computador pessoal),
 com o uso de Qt para a interface gráfica e o arquivo InformacoesAluno.txt como banco de dados local.
 Ele ajuda a visualizar como o sistema será utilizado no mundo real.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
alignment document
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename C:/Users/abiga/Downloads/9. Diagrama de Implantação – Execução no sistema.png
	lyxscale 50
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Diagrama de implantação
\begin_inset CommandInset label
LatexCommand label
name "cap:Diagrama-de-implantação."

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
