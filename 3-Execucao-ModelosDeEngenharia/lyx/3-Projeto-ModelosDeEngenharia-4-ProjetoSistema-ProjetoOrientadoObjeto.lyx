#LyX 2.4 created this file. For more info see https://www.lyx.org/
\lyxformat 620
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass extbook
\begin_preamble
\usepackage {graphicx}
\usepackage {longtable}
\usepackage {indentfirst}
\renewenvironment{center}{\par\centering}{\par}

% Comentar linhas abaixo se não estiver usando pacote abntex
% ou se o pacote ainda não foi instalado.
% neste caso sugere-se usar citações no padrão apalike (lembra o da anbt).
%\usepackage[alf ,abnt-etal-cite=2 , abnt-year-extra-label=yes , abnt-etal-list=0]{abntcite}
%\usepackage {helvet}
%\renewcommand {\familydefault}{\sfdefault}

% Para uso de listagens de código
\usepackage{color}
\definecolor{azulclaro}{rgb}{0.6,1,1}%   rgb color model
% Informa que vai usar o pacote listings, 
% disponibilizado em /usr/share/texmf/doc/latex/styles/listings.dvi
\usepackage{listings}
\end_preamble
\use_default_options false
\master DocumentoMestre-Trabalho-ProgramacaoPratica.lyx
\maintain_unincluded_children no
\language brazilian
\language_package auto
\inputencoding auto-legacy
\fontencoding auto
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_roman_osf false
\font_sans_osf false
\font_typewriter_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement p
\paperfontsize 12
\spacing onehalf
\use_hyperref false
\papersize a4
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_formatted_ref 0
\use_minted 0
\use_lineno 0
\index Índice
\shortcut idx
\color #008000
\end_index
\paperwidth 210mm
\paperheight 297mm
\leftmargin 30mm
\topmargin 25mm
\rightmargin 20mm
\bottommargin 20mm
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle fancy
\tablestyle default
\tracking_changes false
\output_changes false
\change_bars false
\postpone_fragile_content false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\docbook_table_output 0
\docbook_mathml_prefix 1
\end_header

\begin_body

\begin_layout Chapter
Projeto 
\begin_inset CommandInset label
LatexCommand label
name "chap:Projeto-do-Sistema"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lhead{
\backslash
thechapter - Projeto} 
\end_layout

\end_inset


\end_layout

\begin_layout Section
Projeto do Sistema
\begin_inset Index idx
range none
pageformat default
status open

\begin_layout Plain Layout
Projeto do sistema
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sec:Projeto-do-sistema"

\end_inset


\end_layout

\begin_layout Standard
O projeto do sistema PetroPlanner foi estruturado com base na análise orientada a objeto e nas necessidades práticas dos estudantes de Engenharia de Petróleo.
 O sistema foi concebido como uma aplicação desktop autônoma,
 utilizando C++ com o framework Qt para a interface gráfica e manipulação de dados.
\end_layout

\begin_layout Enumerate
Protocolos
\begin_inset Index idx
range none
pageformat default
status open

\begin_layout Plain Layout
Protocolos
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Entre elementos externos:
 A aplicação não depende de comunicação com dispositivos externos ou APIs.
 O foco está na interação direta com o usuário por meio da interface gráfica.
\end_layout

\begin_layout Itemize
Entre elementos internos:
 Os módulos se comunicam por meio de chamadas de métodos diretas,
 utilizando objetos e ponteiros.
 O sistema de sinais e slots do Qt também é amplamente utilizado para eventos da interface.
\end_layout

\begin_layout Itemize
Interface das classes:
 As APIs internas são definidas pelos arquivos de cabeçalho C++ (.h),
 que especificam os métodos públicos de cada classe.
\end_layout

\begin_layout Itemize
Formato de arquivos:
 As informações do aluno são salvas em arquivos .txt,
 com estrutura delimitada por ponto e vírgula (;),
 facilitando leitura e edição.
\end_layout

\end_deeper
\begin_layout Enumerate
Recursos
\begin_inset Index idx
range none
pageformat default
status open

\begin_layout Plain Layout
Recursos
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Uso de memória:
 O gerenciamento é feito pelo Qt,
 que possui hierarquia de objetos parent-child,
 e pelo uso consciente de new/delete e containers da STL.
\end_layout

\begin_layout Itemize
Banco de dados:
 Não foi usado um banco de dados tradicional.
 Os dados são persistidos em arquivos de texto,
 mas a estrutura pode ser adaptada futuramente para uso de SQLite.
\end_layout

\begin_layout Itemize
Armazenamento:
 Todo o conteúdo é armazenado localmente no computador do usuário.
 A portabilidade é garantida pelos arquivos simples e leves.
\end_layout

\end_deeper
\begin_layout Enumerate
Controle
\begin_inset Index idx
range none
pageformat default
status open

\begin_layout Plain Layout
Controle
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Baseado em eventos:
 O sistema responde a eventos do usuário (cliques,
 seleções),
 utilizando o sistema de event loop do Qt.
\end_layout

\begin_layout Itemize
Condições extremas:
 São tratadas por meio de verificações de entrada (como número de faltas,
 notas fora do padrão) e mensagens de alerta.
\end_layout

\begin_layout Itemize
Concorrência:
 Como o sistema é leve e voltado para tarefas rápidas,
 a concorrência ainda não foi necessária,
 mas o Qt oferece suporte a QThread para futuras otimizações.
\end_layout

\begin_layout Itemize
Escalas de tempo:
 As interações são imediatas.
 Alterações em dados são salvas logo após ações do usuário (ex:
 clicar em “Salvar”).
\end_layout

\end_deeper
\begin_layout Enumerate
Plataformas
\begin_inset Index idx
range none
pageformat default
status open

\begin_layout Plain Layout
Plataformas
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Arquitetura:
 O projeto adota uma estrutura próxima ao padrão MVC:
 dados (modelos),
 telas (views) e funções de controle (slots e métodos).
\end_layout

\begin_layout Itemize
Plataformas suportadas:
 Qt permite compatibilidade com Windows,
 Linux e macOS.
\end_layout

\begin_layout Itemize
Bibliotecas utilizadas:
\end_layout

\begin_layout Itemize
Qt:
 Interface gráfica,
 gerenciamento de eventos,
 arquivos.
\end_layout

\begin_layout Itemize
STL:
 Containers (vector,
 map,
 etc.).
\end_layout

\begin_layout Itemize
IDE:
 Qt Creator,
 voltado para projetos em C++/Qt.
\end_layout

\end_deeper
\begin_layout Enumerate
Padrões de projeto
\end_layout

\begin_layout Standard
Foram seguidos princípios básicos de projeto orientado a objeto:
\end_layout

\begin_layout Itemize
Modularidade:
 cada classe tem uma responsabilidade bem definida.
\end_layout

\begin_layout Itemize
Baixo acoplamento e alta coesão:
 a comunicação entre os módulos se dá por meio de interfaces diretas ou sinais.
\end_layout

\begin_layout Itemize
Padrões usados:
\end_layout

\begin_deeper
\begin_layout Itemize
MVC:
 organização entre interface,
 lógica e dados.
\end_layout

\begin_layout Itemize
Observer (via sinais e slots):
 resposta a eventos na interface.
\end_layout

\begin_layout Itemize
Singleton (implícito para classes que representam o aluno ativo).
\end_layout

\end_deeper
\begin_layout Section
Projeto Orientado a Objeto – POO
\begin_inset Index idx
range none
pageformat default
status open

\begin_layout Plain Layout
POO
\end_layout

\end_inset


\begin_inset Index idx
range none
pageformat default
status open

\begin_layout Plain Layout
Projeto orientado a objeto
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sec:Projeto-orientado-a-objeto"

\end_inset


\end_layout

\begin_layout Standard
O projeto orientado a objeto levou em consideração os recursos da linguagem C++ e do framework Qt.
 As classes definidas na análise foram detalhadas com os métodos,
 atributos e estruturas necessárias para implementação real.
\end_layout

\begin_layout Subsubsection
Efeitos do projeto no modelo
\begin_inset Index idx
range none
pageformat default
status open

\begin_layout Plain Layout
modelo
\end_layout

\end_inset

 estrutural
\begin_inset CommandInset label
LatexCommand label
name "subsec:Efeito-do-projeto-no-modelo-estrutural"

\end_inset


\end_layout

\begin_layout Itemize
Diagramas de pacotes foram atualizados para incluir subsistemas como GUI,
 lógica,
 e persistência.
\end_layout

\begin_layout Itemize
Diagramas de classes foram refinados com atributos como QPushButton*,
 QVBoxLayout* e métodos como on_botaoVerGradeCompleta_clicked().
\end_layout

\begin_layout Subsubsection
Efeitos do projeto no modelo
\begin_inset Index idx
range none
pageformat default
status open

\begin_layout Plain Layout
modelo
\end_layout

\end_inset

 dinâmico
\begin_inset CommandInset label
LatexCommand label
name "subsec:Efeito-do-projeto-no-modelo-dinamico"

\end_inset


\end_layout

\begin_layout Itemize
Diagramas de sequência e comunicação foram atualizados para refletir chamadas de métodos reais entre objetos da interface (ex:
 botão de salvar → método que grava arquivo).
\end_layout

\begin_layout Itemize
Diagrama de atividades agora inclui verificações de dados,
 simulações e salvamento.
\end_layout

\begin_layout Itemize
Máquinas de estado modelam,
 por exemplo,
 o ciclo de vida de uma disciplina (não cursada → em curso → aprovada).
\end_layout

\begin_layout Subsubsection
Efeitos do projeto nos atributos
\begin_inset Index idx
range none
pageformat default
status open

\begin_layout Plain Layout
atributos
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "subsec:Efeito-do-projeto-nos-atributos"

\end_inset


\end_layout

\begin_layout Itemize
Novos atributos:
 ponteiros para elementos da interface (ex:
 QLabel* labelCRA) e flags internos (bool modoEdicaoAtivo).
\end_layout

\begin_layout Subsubsection
Efeitos do projeto nos métodos
\begin_inset Index idx
range none
pageformat default
status open

\begin_layout Plain Layout
métodos
\end_layout

\end_inset


\begin_inset Index idx
range none
pageformat default
status open

\begin_layout Plain Layout
Efeitos do projeto nos métodos
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Novos métodos:
 slots de eventos do Qt (ex:
 void aoClicarSalvar()),
 métodos de controle da interface e salvamento de dados em arquivos.
\end_layout

\begin_layout Subsubsection
Efeitos do projeto nas heranças
\begin_inset Index idx
range none
pageformat default
status open

\begin_layout Plain Layout
heranças
\end_layout

\end_inset


\begin_inset Index idx
range none
pageformat default
status open

\begin_layout Plain Layout
Efeitos do projeto nas heranças
\end_layout

\end_inset


\begin_inset Index idx
range none
pageformat default
status open

\begin_layout Plain Layout
Heranças
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Herança:
 usada com Qt,
 onde classes como TelaInicial herdam de QMainWindow.
\end_layout

\begin_layout Subsubsection
Efeitos do projeto nas associações
\begin_inset Index idx
range none
pageformat default
status open

\begin_layout Plain Layout
Efeitos do projeto nas associações
\end_layout

\end_inset


\begin_inset Index idx
range none
pageformat default
status open

\begin_layout Plain Layout
Associações
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Associações:
 implementadas via ponteiros e containers como QVector<CDisciplinas>.
\end_layout

\begin_layout Subsubsection
Efeitos do projeto nas otimizações
\begin_inset Index idx
range none
pageformat default
status open

\begin_layout Plain Layout
otimizações
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Desempenho:
 as telas foram desenhadas para responder rapidamente,
 mesmo com muitos dados.
\end_layout

\begin_layout Itemize
Organização:
 classes auxiliares foram criadas para manter o código limpo.
\end_layout

\begin_layout Itemize
Escalabilidade:
 estrutura preparada para expansão futura (ex:
 suporte a banco de dados ou exportação de relatórios).
\end_layout

\begin_layout Section
Diagrama de Componentes
\begin_inset Index idx
range none
pageformat default
status open

\begin_layout Plain Layout
Diagrama de componentes
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sec:Diagrama-de-componentes"

\end_inset


\end_layout

\begin_layout Standard
Este diagrama representa os módulos físicos do sistema e suas dependências.
 Cada componente encapsula uma parte funcional,
 como o módulo de leitura de arquivos,
 o módulo de simulação ou o acompanhamento de disciplinas.
 Ele é importante para entender como o sistema é dividido em unidades reutilizáveis e independentes.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
alignment document
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename C:/Users/abiga/Downloads/8. Diagrama de Componentes – Arquitetura geral.png
	lyxscale 40
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Diagrama de componentes
\begin_inset CommandInset label
LatexCommand label
name "cap:Diagrama-de-componentes"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Diagrama de Implantação
\begin_inset Index idx
range none
pageformat default
status open

\begin_layout Plain Layout
Diagrama de implantação
\end_layout

\end_inset


\begin_inset Index idx
range none
pageformat default
status open

\begin_layout Plain Layout
Diagrama de execução
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sec:Diagrama-de-execução"

\end_inset


\end_layout

\begin_layout Standard
Este diagrama representa a arquitetura física de execução do sistema.
 Mostra onde os componentes do sistema estão implantados,
 como no ambiente local (computador pessoal),
 com o uso de Qt para a interface gráfica e o arquivo InformacoesAluno.txt como banco de dados local.
 Ele ajuda a visualizar como o sistema será utilizado no mundo real.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
alignment document
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename C:/Users/abiga/Downloads/9. Diagrama de Implantação – Execução no sistema.png
	lyxscale 50
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Diagrama de implantação
\begin_inset CommandInset label
LatexCommand label
name "cap:Diagrama-de-implantação."

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
