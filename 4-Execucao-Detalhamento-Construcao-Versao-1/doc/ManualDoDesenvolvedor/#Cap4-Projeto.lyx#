#LyX 2.4 created this file. For more info see https://www.lyx.org/
\lyxformat 620
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass extbook
\begin_preamble
\usepackage {graphicx}
\usepackage {longtable}
\usepackage {indentfirst}
\renewenvironment{center}{\par\centering}{\par}

% Comentar linhas abaixo se não estiver usando pacote abntex
% ou se o pacote ainda não foi instalado.
% neste caso sugere-se usar citações no padrão apalike (lembra o da anbt).
%\usepackage[alf ,abnt-etal-cite=2 , abnt-year-extra-label=yes , abnt-etal-list=0]{abntcite}
%\usepackage {helvet}
%\renewcommand {\familydefault}{\sfdefault}

% Para uso de listagens de código
\usepackage{color}
\definecolor{azulclaro}{rgb}{0.6,1,1}%   rgb color model
% Informa que vai usar o pacote listings, 
% disponibilizado em /usr/share/texmf/doc/latex/styles/listings.dvi
\usepackage{listings}
\end_preamble
\use_default_options false
\master DocumentoMestre-Trabalho-ProgramacaoPratica.lyx
\maintain_unincluded_children no
\language brazilian
\language_package auto
\inputencoding auto-legacy
\fontencoding auto
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_roman_osf false
\font_sans_osf false
\font_typewriter_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement p
\paperfontsize 12
\spacing onehalf
\use_hyperref false
\papersize a4
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_formatted_ref 0
\use_minted 0
\use_lineno 0
\index Índice
\shortcut idx
\color #008000
\end_index
\paperwidth 210mm
\paperheight 297mm
\leftmargin 30mm
\topmargin 25mm
\rightmargin 20mm
\bottommargin 20mm
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle fancy
\tablestyle default
\tracking_changes false
\output_changes false
\change_bars false
\postpone_fragile_content false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\docbook_table_output 0
\docbook_mathml_prefix 1
\end_header

\begin_body

\begin_layout Chapter
Projeto 
\begin_inset CommandInset label
LatexCommand label
name "chap:Projeto-do-Sistema"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lhead{
\backslash
thechapter - Projeto} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Neste capítulo do projeto de engenharia veremos questões associadas ao projeto do sistema,
 incluindo protocolos,
 recursos,
 plataformas suportadas,
 inplicações nos diagramas feitos anteriormente,
 diagramas de componentes e implantação.
 Na segunda parte revisamos os diagramas levando em conta as decisões do projeto do sistema.
\end_layout

\begin_layout Section
Projeto do Sistema
\begin_inset Index idx
range none
pageformat default
status open

\begin_layout Plain Layout
Projeto do sistema
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sec:Projeto-do-sistema"

\end_inset


\end_layout

\begin_layout Standard
O projeto do sistema PetroPlanner foi estruturado com base na análise orientada a objeto e nas necessidades práticas dos estudantes de Engenharia de Petróleo.
 O sistema foi concebido como uma aplicação desktop autônoma,
 utilizando C++ com o framework Qt para a interface gráfica e manipulação de dados.
\end_layout

\begin_layout Enumerate
Protocolos
\begin_inset Index idx
range none
pageformat default
status open

\begin_layout Plain Layout
Protocolos
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Entre elementos externos:
 A aplicação não depende de comunicação com dispositivos externos ou APIs.
 O foco está na interação direta com o usuário por meio da interface gráfica.
\end_layout

\begin_layout Itemize
Entre elementos internos:
 Os módulos se comunicam por meio de chamadas de métodos diretas,
 utilizando objetos e ponteiros.
 O sistema de sinais e slots do Qt também é amplamente utilizado para eventos da interface.
\end_layout

\begin_layout Itemize
Interface das classes:
 As APIs internas são definidas pelos arquivos de cabeçalho C++ (.h),
 que especificam os métodos públicos de cada classe.
\end_layout

\begin_layout Itemize
Formato de arquivos:
 As informações do aluno são salvas em arquivos .txt,
 com estrutura delimitada por ponto e vírgula (;),
 facilitando leitura e edição.
\end_layout

\end_deeper
\begin_layout Enumerate
Recursos
\begin_inset Index idx
range none
pageformat default
status open

\begin_layout Plain Layout
Recursos
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Uso de memória:
 O gerenciamento é feito pelo Qt,
 que possui hierarquia de objetos parent-child,
 e pelo uso consciente de new/delete e containers da STL.
\end_layout

\begin_layout Itemize
Banco de dados:
 Não foi usado um banco de dados tradicional.
 Os dados são persistidos em arquivos de texto,
 mas a estrutura pode ser adaptada futuramente para uso de SQLite.
\end_layout

\begin_layout Itemize
Armazenamento:
 Todo o conteúdo é armazenado localmente no computador do usuário.
 A portabilidade é garantida pelos arquivos simples e leves.
\end_layout

\end_deeper
\begin_layout Enumerate
Controle
\begin_inset Index idx
range none
pageformat default
status open

\begin_layout Plain Layout
Controle
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Baseado em eventos:
 O sistema responde a eventos do usuário (cliques,
 seleções),
 utilizando o sistema de event loop do Qt.
\end_layout

\begin_layout Itemize
Condições extremas:
 São tratadas por meio de verificações de entrada (como número de faltas,
 notas fora do padrão) e mensagens de alerta.
\end_layout

\begin_layout Itemize
Concorrência:
 Como o sistema é leve e voltado para tarefas rápidas,
 a concorrência ainda não foi necessária,
 mas o Qt oferece suporte a QThread para futuras otimizações.
\end_layout

\begin_layout Itemize
Escalas de tempo:
 As interações são imediatas.
 Alterações em dados são salvas logo após ações do usuário (ex:
 clicar em “Salvar”).
\end_layout

\end_deeper
\begin_layout Enumerate
Plataformas
\begin_inset Index idx
range none
pageformat default
status open

\begin_layout Plain Layout
Plataformas
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Arquitetura:
 O projeto adota uma estrutura próxima ao padrão MVC:
 dados (modelos),
 telas (views) e funções de controle (slots e métodos).
\end_layout

\begin_layout Itemize
Plataformas suportadas:
 Qt permite compatibilidade com Windows,
 Linux e macOS.
\end_layout

\begin_layout Itemize
Bibliotecas utilizadas:
\end_layout

\begin_layout Itemize
Qt:
 Interface gráfica,
 gerenciamento de eventos,
 arquivos.
\end_layout

\begin_layout Itemize
STL:
 Containers (vector,
 map,
 etc.).
\end_layout

\begin_layout Itemize
IDE:
 Qt Creator,
 voltado para projetos em C++/Qt.
\end_layout

\end_deeper
\begin_layout Enumerate
Padrões de projeto
\end_layout

\begin_layout Standard
Foram seguidos princípios básicos de projeto orientado a objeto:
\end_layout

\begin_layout Itemize
Modularidade:
 cada classe tem uma responsabilidade bem definida.
\end_layout

\begin_layout Itemize
Baixo acoplamento e alta coesão:
 a comunicação entre os módulos se dá por meio de interfaces diretas ou sinais.
\end_layout

\begin_layout Itemize
Padrões usados:
\end_layout

\begin_deeper
\begin_layout Itemize
MVC:
 organização entre interface,
 lógica e dados.
\end_layout

\begin_layout Itemize
Observer (via sinais e slots):
 resposta a eventos na interface.
\end_layout

\begin_layout Itemize
Singleton (implícito para classes que representam o aluno ativo).
\end_layout

\end_deeper
\begin_layout Section
Projeto Orientado a Objeto – POO
\begin_inset Index idx
range none
pageformat default
status open

\begin_layout Plain Layout
POO
\end_layout

\end_inset


\begin_inset Index idx
range none
pageformat default
status open

\begin_layout Plain Layout
Projeto orientado a objeto
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sec:Projeto-orientado-a-objeto"

\end_inset


\end_layout

\begin_layout Standard
O projeto orientado a objeto levou em consideração os recursos da linguagem C++ e do framework Qt.
 As classes definidas na análise foram detalhadas com os métodos,
 atributos e estruturas necessárias para implementação real.
\end_layout

\begin_layout Subsubsection
Efeitos do projeto no modelo
\begin_inset Index idx
range none
pageformat default
status open

\begin_layout Plain Layout
modelo
\end_layout

\end_inset

 estrutural
\begin_inset CommandInset label
LatexCommand label
name "subsec:Efeito-do-projeto-no-modelo-estrutural"

\end_inset


\end_layout

\begin_layout Itemize
Diagramas de pacotes foram atualizados para incluir subsistemas como GUI,
 lógica,
 e persistência.
\end_layout

\begin_layout Itemize
Diagramas de classes foram refinados com atributos como QPushButton*,
 QVBoxLayout* e métodos como on_botaoVerGradeCompleta_clicked().
\end_layout

\begin_layout Subsubsection
Efeitos do projeto no modelo
\begin_inset Index idx
range none
pageformat default
status open

\begin_layout Plain Layout
modelo
\end_layout

\end_inset

 dinâmico
\begin_inset CommandInset label
LatexCommand label
name "subsec:Efeito-do-projeto-no-modelo-dinamico"

\end_inset


\end_layout

\begin_layout Itemize
Diagramas de sequência e comunicação foram atualizados para refletir chamadas de métodos reais entre objetos da interface (ex:
 botão de salvar → método que grava arquivo).
\end_layout

\begin_layout Itemize
Diagrama de atividades agora inclui verificações de dados,
 simulações e salvamento.
\end_layout

\begin_layout Itemize
Máquinas de estado modelam,
 por exemplo,
 o ciclo de vida de uma disciplina (não cursada → em curso → aprovada).
\end_layout

\begin_layout Subsubsection
Efeitos do projeto nos atributos
\begin_inset Index idx
range none
pageformat default
status open

\begin_layout Plain Layout
atributos
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "subsec:Efeito-do-projeto-nos-atributos"

\end_inset


\end_layout

\begin_layout Itemize
Novos atributos:
 ponteiros para elementos da interface (ex:
 QLabel* labelCRA) e flags internos (bool modoEdicaoAtivo).
\end_layout

\begin_layout Subsubsection
Efeitos do projeto nos métodos
\begin_inset Index idx
range none
pageformat default
status open

\begin_layout Plain Layout
métodos
\end_layout

\end_inset


\begin_inset Index idx
range none
pageformat default
status open

\begin_layout Plain Layout
Efeitos do projeto nos métodos
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Novos métodos:
 slots de eventos do Qt (ex:
 void aoClicarSalvar()),
 métodos de controle da interface e salvamento de dados em arquivos.
\end_layout

\begin_layout Subsubsection
Efeitos do projeto nas heranças
\begin_inset Index idx
range none
pageformat default
status open

\begin_layout Plain Layout
heranças
\end_layout

\end_inset


\begin_inset Index idx
range none
pageformat default
status open

\begin_layout Plain Layout
Efeitos do projeto nas heranças
\end_layout

\end_inset


\begin_inset Index idx
range none
pageformat default
status open

\begin_layout Plain Layout
Heranças
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Herança:
 usada com Qt,
 onde classes como TelaInicial herdam de QMainWindow.
\end_layout

\begin_layout Subsubsection
Efeitos do projeto nas associações
\begin_inset Index idx
range none
pageformat default
status open

\begin_layout Plain Layout
Efeitos do projeto nas associações
\end_layout

\end_inset


\begin_inset Index idx
range none
pageformat default
status open

\begin_layout Plain Layout
Associações
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Associações:
 implementadas via ponteiros e containers como QVector<CDisciplinas>.
\end_layout

\begin_layout Subsubsection
Efeitos do projeto nas otimizações
\begin_inset Index idx
range none
pageformat default
status open

\begin_layout Plain Layout
otimizações
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Desempenho:
 as telas foram desenhadas para responder rapidamente,
 mesmo com muitos dados.
\end_layout

\begin_layout Itemize
Organização:
 classes auxiliares foram criadas para manter o código limpo.
\end_layout

\begin_layout Itemize
Escalabilidade:
 estrutura preparada para expansão futura (ex:
 suporte a banco de dados ou exportação de relatórios).
\end_layout

\begin_layout Section
Diagrama de Componentes
\begin_inset Index idx
range none
pageformat default
status open

\begin_layout Plain Layout
Diagrama de componentes
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sec:Diagrama-de-componentes"

\end_inset


\end_layout

\begin_layout Standard
Este diagrama representa os módulos físicos do sistema e suas dependências.
 Cada componente encapsula uma parte funcional,
 como o módulo de leitura de arquivos,
 o módulo de simulação ou o acompanhamento de disciplinas.
 Ele é importante para entender como o sistema é dividido em unidades reutilizáveis e independentes.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
alignment document
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename C:/Users/abiga/Downloads/8. Diagrama de Componentes – Arquitetura geral.png
	lyxscale 40
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Diagrama de componentes
\begin_inset CommandInset label
LatexCommand label
name "cap:Diagrama-de-componentes"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Diagrama de Implantação
\begin_inset Index idx
range none
pageformat default
status open

\begin_layout Plain Layout
Diagrama de implantação
\end_layout

\end_inset


\begin_inset Index idx
range none
pageformat default
status open

\begin_layout Plain Layout
Diagrama de execução
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sec:Diagrama-de-execução"

\end_inset


\end_layout

\begin_layout Standard
Este diagrama representa a arquitetura física de execução do sistema.
 Mostra onde os componentes do sistema estão implantados,
 como no ambiente local (computador pessoal),
 com o uso de Qt para a interface gráfica e o arquivo InformacoesAluno.txt como banco de dados local.
 Ele ajuda a visualizar como o sistema será utilizado no mundo real.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
alignment document
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename C:/Users/abiga/Downloads/9. Diagrama de Implantação – Execução no sistema.png
	lyxscale 50
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Diagrama de implantação
\begin_inset CommandInset label
LatexCommand label
name "cap:Diagrama-de-implantação."

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Lista de características <<features>>
\begin_inset CommandInset label
LatexCommand label
name "subsec: Lista de características <<features>>"

\end_inset


\end_layout

\begin_layout Standard

\series bold
Versão v0.1 – Núcleo de Dados e Estrutura Inicial
\end_layout

\begin_layout Standard
Nesta fase,
 o foco esteve na definição das classes centrais,
 na estrutura de dados e na leitura automatizada das informações do aluno.
 Essas funcionalidades representam a base de todo o sistema.
\end_layout

\begin_layout Standard

\series bold
Features v0.1:
\end_layout

\begin_layout Itemize
Leitura de arquivos .txt contendo os dados do aluno.
\end_layout

\begin_layout Itemize
Armazenamento organizado das disciplinas aprovadas,
 em curso e não cursadas.
\end_layout

\begin_layout Itemize
Implementação da classe CAluno,
 responsável por representar o aluno no sistema.
\end_layout

\begin_layout Itemize
Implementação da classe CDisciplinas,
 representando a estrutura de uma disciplina.
\end_layout

\begin_layout Itemize
Implementação do método lerDoArquivo(),
 que interpreta e estrutura os dados salvos.
\end_layout

\begin_layout Itemize
Cálculo automático da carga horária cursada via calcularHorasEmCurso() e calcularCHTotalCursada().
\end_layout

\begin_layout Standard

\series bold
Versão v0.3 – Interface Gráfica Inicial e Integração com Backend
\end_layout

\begin_layout Standard
Nesta fase,
 iniciou-se a construção da interface gráfica utilizando Qt,
 conectando os dados organizados no backend com elementos visuais,
 permitindo ao usuário interagir com suas informações acadêmicas.
\end_layout

\begin_layout Standard

\series bold
Features v0.3:
\end_layout

\begin_layout Itemize
Implementação da TelaInicial com exibição das informações do aluno.
\end_layout

\begin_layout Itemize
Conexão entre CAluno/CDisciplinas e a interface gráfica.
\end_layout

\begin_layout Itemize
Implementação da ModuloGradeCompleta,
 exibindo a grade curricular completa do curso.
\end_layout

\begin_layout Itemize
Uso de cores distintas para indicar status das disciplinas:
 aprovadas,
 em curso,
 reprovadas,
 não cursadas.
\end_layout

\begin_layout Itemize
Criação da progress bar de carga horária semanal (limite de 16h).
\end_layout

\begin_layout Itemize
Implementação do método carregarInformacoesAluno() para exibir dados da grade.
\end_layout

\begin_layout Itemize
Testes básicos de navegação entre telas com botões funcionais.
\end_layout

\begin_layout Itemize
Leitura e exibição dinâmica da grade a partir das disciplinas do curso.
\end_layout

\begin_layout Standard

\series bold
Versão v0.7 – Interatividade Avançada e Módulos Auxiliares
\end_layout

\begin_layout Standard
Na fase final,
 o sistema recebeu melhorias significativas em usabilidade e inteligência de simulação,
 com janelas específicas para acompanhar desempenho,
 planejar semestres e visualizar o quadro de horários semanal.
\end_layout

\begin_layout Standard

\series bold
Features v0.7:
\end_layout

\begin_layout Itemize
Implementação da janela AcompanhamentoDisciplina,
 com simulação de notas e cálculo de média final.
\end_layout

\begin_layout Itemize
Cálculo do que o aluno precisa tirar nas próximas avaliações para ser aprovado.
\end_layout

\begin_layout Itemize
Implementação do método abrirJanelaDisciplina() na TelaInicial,
 com ligação entre as disciplinas da grade e suas janelas detalhadas.
\end_layout

\begin_layout Itemize
Implementação do módulo SimulacaoPlanejamentoSEM,
 simulando planejamento de semestres futuros.
\end_layout

\begin_layout Itemize
Checagem automática de pré-requisitos ao simular disciplinas elegíveis.
\end_layout

\begin_layout Itemize
Implementação do QuadroDeHorarios,
 preenchido com base nas disciplinas em andamento e atividades extras.
\end_layout

\begin_layout Itemize
Armazenamento e leitura automatizada dos horários no arquivo InformacoesAluno.txt.
\end_layout

\begin_layout Itemize
Testes com diferentes arquivos de entrada simulando perfis variados de alunos (CRA,
 disciplinas,
 horários).
\end_layout

\begin_layout Subsection
Tabela classificação sistema
\begin_inset CommandInset label
LatexCommand label
name "subsec:Tabela-classificação-sistema"

\end_inset


\end_layout

\begin_layout Standard
A Tabela a seguir é utilizada para classificação do sistema desenvolvido.
 Deve ser preenchida na etapa de projeto e revisada no final,
 quando o software for entregue na sua versão final.
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="22" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="3cm">
<column alignment="center" valignment="top" width="12cm">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color blue
Licença:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[X] livre GPL-v3 [ ] proprietária
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color blue
Engenharia de software:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[ ]
\color blue
 
\color inherit
tradicional [X] ágil [ ] outras
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color blue
Paradigma de programação:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[ ] estruturada [X] orientado a objeto - POO [ ] funcional
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color blue
Modelagem UML:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[X] básica 
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Diagramas de caso de uso,
 de componentes(assuntos/pacotes/componentes),
 de classes,
 de sequência,
 de distribuição
\end_layout

\end_inset

[X] intermediária [X ] avançada
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Uso de recursos avançados de UML
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color blue
Algoritmos
\color inherit
:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[X] alto nível 
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout

\color blue
:

\color inherit
 são algoritmos que são implementados utilizando instruções mais complexas.
\end_layout

\end_inset

[X] baixo nível
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout

\color blue
:

\color inherit
 são algoritmos que são implementados utilizando instruções mais básicas e essenciais.
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Implementação:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[ ] recursivo ou [X] iterativo
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout

\series bold
\color blue
:

\series default
 
\color inherit
um algoritmo iterativo utiliza estruturas de repetição,
 fazendo com que determinadas atividades sejam repetidas tantas vezes quanto necessárias,
 normalmente temos algum critério de parada.
 Já um algoritmo recursivo é um algoritmo que chama a sí mesmo.
 Note que chamar a sí mesmo é uma forma de iteração.
 O exemplo do pagamento dos salários é iterativo,
 foi do empregado 1 ao empregado 10000.
\end_layout

\end_inset

;
 [X] determinístico 
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout

\color blue
:

\color inherit
 é determinístico quando o caminho para solução é exato e não-determinístico quando usamos mecanismos de busca/estimativas para encontrar uma solução.
\end_layout

\end_inset

ou [ ] não-determinístico;
 [ ] exato ou [X] aproximado
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout

\color blue
:
 
\color inherit
muitas vezes tenho a equação que me dá uma solução exata,
 quando utilizo esta equação meu algoritmo é exato.
 Mas em muitas situações eu não tenho a soluição exata,
 tenho apenas equações aproximadas,
 quando uso uma equação inexata ou empírica,
 sei que meu algoritmo é aproximado.
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Concorrências:
 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[X] serial [X] concorrente [X] paralelo
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Paradigma:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[X] dividir para conquistar
\begin_inset Note Note
status collapsed

\begin_layout Itemize

\series bold
\color blue
:

\series default
 
\color inherit
são algoritmos que trabalham com a divisão e subdivisão de um problema em partes menores;
\end_layout

\begin_deeper
\begin_layout Itemize
Exemplo:
 escrever seu TCC - Trabalho de Conclusão de Curso,
 você irá dividir o mesmo em vários capítulos,
 os capítulos em seções e as seções em subseções.
 De forma que então conseguirá desenvolver seu trabalho,
 pois as partes pequenas tornam-se viáveis de serem feitas.
\end_layout

\end_deeper
\end_inset

 [ ] programação linear
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout

\series bold
\color blue
:

\series default
\color inherit
 o problema é resolvido através de programação linear envolvendo a busca de máximos e mínimos
\end_layout

\end_inset

 [ ] transformação/ redução
\begin_inset Note Note
status collapsed

\begin_layout Itemize

\series bold
\color blue
:

\series default
\color inherit
 são algoritmos que mudam o problema fazendo associações com outros,
 geralmente eu conheço a solução deste outro problema,
 resolvo o mesmo,
 e então retorno;
 é exatamente o que fazemos por exemplo quando usamos uma transformada matemática para resolver um problema.
\end_layout

\begin_deeper
\begin_layout Itemize
Exemplo:
 não sei resolver estas equações professor.
 Faça uma transformada de Laplace,
 resolva no espaço de Laplace e então volte.
\end_layout

\end_deeper
\end_inset

 [ ] busca e enumeração
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout

\series bold
\color blue
:

\series default
\color inherit
 são algoritmos que usam a teoria dos grafos.
\end_layout

\end_inset

 [ ] heurístico e probabilístico
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout

\series bold
\color blue
:

\series default
\color inherit
 são algoritmos que trabalham com números aleatórios e heurísticas,
 aproximações,
 em busca da solução.
\end_layout

\end_inset

 [ ] baseados em pilhas
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout

\series bold
\color blue
:

\series default
\color inherit
 são algoritmos de cálculo implementados utilizando o conceito de pilhas e Notação Polonesa Inversa (
\emph on
RPN - Reverse Polish Notation
\emph default
),
 também conhecida como notação pós-fixada.
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color blue
Software:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[ ] de base
\begin_inset Note Note
status collapsed

\begin_layout Itemize

\series bold
:
 
\series default
Estão relacionados ao funcionamento do computador e seus recursos (processador,
 memória,
 hd,
 teclado,
 mouse,
 portas,
 etc).
 Exemplos:
\end_layout

\begin_deeper
\begin_layout Itemize
Sistemas operacionais (Windows,
 GNU/Linux,
 Mac Os X,
 Android).
\end_layout

\begin_layout Itemize
Suporte ao sistema operacional (
\emph on
drivers 
\emph default
de dispositivos).
\end_layout

\begin_layout Itemize
Suporte ao desenvolvimento de software (compiladores,

\emph on
 debugers
\emph default
,
 
\emph on
profilers
\emph default
,
 ambientes de desenvolvimento).
\end_layout

\begin_layout Itemize
Suporte a manutenção do computador (utilitários).
\end_layout

\end_deeper
\end_inset

 [X] aplicados
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout

\series bold
:
 
\series default
São os demais softwares,
 os que nos ajudam no dia a dia.
 Podemos dividir em softwares de cunho geral,
 específicos e científicos.
 Esta divisão faz sentido pois os softwares específicos exigem conhecimentos técnicos da área específica e os softwares científicos tem requisitos diferenciados no que se refere a interface,
 documentação,
 demandas de otimização,
 consumo de memória e performance.
 Exemplos:
\end_layout

\end_inset

 [ ] de cunho geral
\begin_inset Note Note
status collapsed

\begin_layout Itemize
Editor de texto,
 editor de apresentações e planilha eletrônica (ex:
 Office,
 Libre Office).
\end_layout

\begin_deeper
\begin_layout Itemize
Aplicativos para ver filmes,
 ouvir músicas e jogos eletrônicos.
\end_layout

\begin_layout Itemize
Aplicações web como navegador de internet,
 gerenciador de email,
 gerenciador de tarefas (chrome,
 gmail).
\end_layout

\begin_layout Itemize
Gerenciador de arquivos na rede (ex:
 dropbox,
 google drive,
 github).
\end_layout

\end_deeper
\end_inset

 [X] específicos para determinada área
\begin_inset Note Note
status collapsed

\begin_layout Itemize
Da área de medicina (interpretação de imagens e diagnósticos).
\end_layout

\begin_deeper
\begin_layout Itemize
Da área de direito (gestão de documentos e processos).
\end_layout

\begin_layout Itemize
Da área de engenharia (CAD,
 modeladores,
 simuladores específicos).
\begin_inset Note Note
status open

\begin_layout Plain Layout
Com uso de IA - Inteligência Artificial.
\end_layout

\end_inset


\end_layout

\end_deeper
\end_inset

 [X] educativo [X] científico
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Modeladores e simuladores de cunho acadêmico.
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Instruções:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[X] alto nível [ ] baixo nível
\begin_inset Note Note
status open

\begin_layout Plain Layout
interrupções/assembler
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Otimização:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[X] serial não otimizado
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout

\series bold
:

\series default
 executa uma sequência de instruções de forma serial (não existe antecipação,
 nem desvios).
 Não houve preocupação com desempenho.
 Não foram aproveitadas opções de otimização do compilador e do processador específico.
 É a forma de programação mais usual!
\end_layout

\end_inset

 [X] serial otimizado
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout

\series bold
:
 
\series default
Neste caso houve preocupação com desempenho,
 com a escolha dos melhores algoritmos,
 com alocação de memória(ex:
 uso de ponteiros),
 com a forma como a linguagem e o sistema operacional lidam com a memória,
 com a chamada das funções.
 Foram aproveitadas opções de otimização do compilador e do processador específico.
 É a forma de otimização mais usual,
 a primeira a ser adotada.
\end_layout

\end_inset

 [X] concorrente
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout

\series bold
:
 
\series default
Neste caso dois ou mais processos/
\emph on
threads
\emph default
 diferentes rodam ao mesmo tempo e trocam informações entre sí.
 Um exemplo típico é o caso do produtor/consumidor.
 O produtor gera dados que são processador pelo consumidor.
 Note que teremos pelo menos dois núcleos sendo utilizados,
 cada um fazendo um processamento diferente.
 Note que os softwares podem ter sido desenvolvidos em linguagens diferentes,
 a comunicação pode ser feita por exemplo via pipe (um canal de comunicação entre programas).
\end_layout

\end_inset

 [X] paralelo
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout

\series bold
:

\series default
 Neste caso dois ou mais processos/
\emph on
threads
\emph default
 iguais rodam em paralelo.
 Um exemplo típico em engenharia é pegar um cálculo muito longo e dividir o mesmo.
 Por exemplo,
 preciso aplicar um filtro passa baixa sobre uma imagem grande.
 Se tenho 4 núcleos a disposição divido a imagem em 4 pedaços e processo cada pedaço usando um dos núcleos.
 Se este processamento for independente é fácil implementar,
 porém,
 se tiver intersecções,
 então terei de usar mecanismos de comunicação entre processos/threads.
\end_layout

\end_inset

 [ ] vetorial
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout

\series bold
:

\series default
 alguns hardwares possibilitam o uso de processamento vetorial,
 antigamente eram muito específicos e caros,
 mas hoje em dia várias CPUs tem capacidade de processamento vetorial,
 por exemplo com o uso de SIMD - Uma Instrução Múltiplos Dados.
 A ideia aqui é que o processador carrega um vetor de dados A,
 carrega um vetor de dados B,
 e realiza a operação de soma armazenando o resultado em C.
 Isto é feito simultaneamente,
 isto é,
 as operações C[0] = A[0] + B[0];
 C[1] = A[1] + B[1];...;
 C[n] = A[n] + B[n];
 são todas feitas no mesmo instante (mesmo 
\emph on
clock
\emph default
).
 Alguns compiladores já permitem otimizações que viabilizam o uso deste tipo de processamento,
 notadamente nas bibliotecas padrões.
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Interface do usuário:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[ ] kernel numérico [ ] linha de comando [ ] modo texto [X] híbrida (texto e saídas gráficas) [ ] modo gráfico (ex:
 Qt) [ ] navegador
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color blue
Recursos de C++:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[X] C++ básico (FCC):
 variáveis padrões da linguagem,
 estruturas de controle e repetição,
 estruturas de dados,
 struct,
 classes(objetos,
 atributos,
 métodos),
 funções;
 entrada e saída de dados (
\emph on
streams
\emph default
),
 funções de cmath
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[X] C++ intermediário:
 funções lambda.
 Ponteiros,
 referências,
 herança,
 herança múltipla,
 polimorfismo,
 sobrecarga de funções e de operadores,
 tipos genéricos (templates),
 
\emph on
smarth pointers
\emph default
.
 Diretrizes de pré-processador,
 classes de armazenamento e modificadores de acesso.
 Estruturas de dados:
 enum,
 uniões.
 Bibliotecas:
 entrada e saída acesso com arquivos de disco,
 redirecionamento.
 Bibliotecas:
 
\emph on
filesystem
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[X] C++ intermediário 2:
 A biblioteca de gabaritos de C++ (a STL),
 containers,
 iteradores,
 objetos funções e funções genéricas.
 Noções de processamento paralelo (múltiplas threads,
 uso de 
\emph on
thread,
 join 
\emph default
e 
\emph on
mutex
\emph default
).
 Bibliotecas:
 
\emph on
random,
 threads
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[ ] C++ avançado:
 Conversão de tipos do usuário,
 especializações de templates,
 excessões.
 Cluster de computadores,
 processamento paralelo e concorrente,
 múltiplos processos (pipes,
 memória compartilhada,
 sinais).
 Bibliotecas:
 
\emph on
expressões regulares,
 múltiplos processos
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color blue
Bibliotecas de C++:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[X] Entrada e saída de dados (
\emph on
streams
\emph default
) [X] cmath [X] 
\emph on
filesystem 
\emph default
[ ] 
\emph on
random 
\emph default
[X] 
\emph on
threads 
\emph default
[ ] 
\emph on
expressões regulares 
\emph default
[ ] 
\emph on
múltiplos processos
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color blue
Bibliotecas externas:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[X] 
\family typewriter
CGnuplot 
\family default
[X] 
\family typewriter
QCustomPlot 
\family default
[X] 
\family typewriter
Qt diálogos
\family default
 [X] QT Janelas/menus/BT______
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color blue
Ferramentas auxiliares:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Montador:

\family typewriter
 
\family default
[ ] make
\family typewriter
 
\family default
[X] cmake
\family typewriter
 
\family default
[ ] qmake
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color blue
IDE:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[X] Editor simples:
 kate/gedit/emacs
\family typewriter
 
\family default
[ ] kdevelop
\family typewriter
 
\family default
[X] QT-Creator
\family typewriter
 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color blue
SCV:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[ ] cvs
\family typewriter
 
\family default
[ ] svn
\family typewriter
 
\family default
[X] git
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color blue
Disciplinas correlacionadas
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[ ] estatística
\begin_inset Note Note
status collapsed

\begin_layout Itemize
[ ] Básica:
 média,
 desvio padrão,
 histogramas,
 números pseudo randômicos.
 Estatística descritiva.
 Probabilidades.
 Variáveis aleatórias Unidimensionais.
 Função de variáveis aleatórias.
 Variáveis aleatórias de duas ou mais dimensões.
 Caracterização de variáveis aleatórias.
 Variáveis aleatórias discretas e contínuas.
 Teorema central do limite.
 Amostragem
\end_layout

\begin_layout Itemize
[ ] Intermediária:
 Estimação.
 Teste de hipótese.
 Correlação e regressão.
 Distribuições (normal.
 T-Student,
 X-quadrado)
\end_layout

\end_inset

 [X] cálculo numérico 
\begin_inset Note Note
status collapsed

\begin_layout Itemize
[ ] Básico:
 erros,
 solver de função (iteração de ponto fixo,
 método das cordas,
 Newton-Raphson),
 integral numérica(trapésio,
 Simpson,
 Gauss),
 interpolação(interpolação polinomial,
 Lagrange,
 Newton,
 funções 
\emph on
spline
\emph default
),
 ajuste de curvas(ajuste por polinômios,
 mínimos quadrados) .
\end_layout

\begin_deeper
\begin_layout Itemize
[ ] Intermediário:
 matrizes e sistemas de equações lineares(solver de sistema de equações - TDMA,
 eliminação gauss,
 fatoração LU),
 solução numérica de equações diferenciais(método de Euler,
 método de Taylor e Runge-Kutta)
\end_layout

\end_deeper
\end_inset

 [X]
\family typewriter
 
\family default
modelamento numérico 
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
[ ] Volume de controle (equações de balanço).
 [ ] Diferenças finitas.
 [ ] Elementos finitos
\end_layout

\end_inset

 [X] análise e processamento de imagens
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_body
\end_document
